[{"appcode":"/*\nFunction \"cron_impl_2func_651_help\" also requires \"cron_impl_2func_651\"\n\nTest Doc:\n   {\n        \"type\":\"recurring_event\",   // The KEY will be <<type>>::<<id>>\n        \"id\":1,                     //\n        \"hour\":14,                  // The hour of the day 0-23, *, *2X, *4X to trigger\n        \"min\":54,                   // The minute in the hour 0-59, *, *2X, *4X to trigger\n        \"action\":\"doCronActionA\",   // What function to run on the trigger\n        \"active\":false,             // Flag to arm or disable this schedule\n        \"verbose\" : {\n          \"user_func\":2,            // Logging level for the action logic : 0=none, etc. etc.\n          \"scheduler\":3             // Logging level for the cron logic   : 0=none, etc. etc.\n        },\n        \"dynamic\" : {\n          \"state\":\"arm\",            // States \"arm\"|\"rearm\"|\"pending\" if any value but \"pending\" start a schedule\n          \"next_sched\": 0,          // Number of seconds since epoch to next desired schedule\n          \"prev_sched\": 0,          // Number of seconds since epoch for previous schedule\n          \"prev_etime\": 0,          // Number of seconds since epoch for previous schedule actual exec time\n          \"prev_delay\": 0,          // Number of seconds that the timer was delayed from the schedule\n          \"prev_atime\": 0           // Number of seconds taken by the user 'action'\n        }\n    }\n    \nNote, you can omit verbose{} and dynamic{} as they will be autocreated by the main Eventing \nFunction \"cron_impl_2func_651\". If verbose{} is missing the logging levels will default to \nverbose\" : {  \"user_func\":1, \"scheduler\":1 }\n*/\n\nfunction OnUpdate(doc, meta) {\n  try {\n    // Check that doc has desired values\n    if (!doc.type || doc.type !== \"recurring_event\" || !doc.active || doc.active != true) return;\n    // doc must have 'action', 'dynamic {}', verbose {}, dynamic.state\n    if (!doc.action || !doc.dynamic || !doc.verbose || !doc.dynamic.state) return;\n    // Only process state pending this will only exist for a 'breif' time\n    if (doc.dynamic.state !== \"pending\") return;\n\n    var mid = doc.type + '::' + doc.id; // make our KEY\n    var newdoc = null;\n    try {\n      // read the current version of doc from KV, e.g. curDoc\n      newdoc = cron_bkt[mid];\n    } catch (e) {} // needed for pre 6.5, note pure 6.5+ deployment returns null sans exception\n\n    var reason = null;\n    if (!newdoc || newdoc == null) {\n      reason = \"cron document is missing\";\n    } else\n    if (!newdoc.active) {\n      reason = \"cron document has active = false\";\n    } else\n    if (!newdoc.dynamic || !newdoc.dynamic.state || newdoc.dynamic.state !== doc.dynamic.state) {\n      reason = \"cron document wrong dynamic.state expected \" + doc.dynamic.state;\n    } else\n    if (crc64(doc) !== crc64(newdoc)) {\n      reason = \"cron document changed\";\n    }\n    if (reason != null) {\n      if (!newdoc || newdoc == null || newdoc.verbose.scheduler >= 1) {\n        log('OnUpdate help: X stopping schedule because ' + reason + ',', newdoc)\n        return;\n      }\n    }\n\n    newdoc.dynamic.state = \"rearm\";\n    try {\n      cron_bkt[mid] = newdoc;\n    } catch (e) {\n      log('OnUpdate help: F ' + mid + ' FATAL could not update KV cron cycle ' + newdoc.action);\n      return;\n    }\n\n    if (newdoc.verbose.scheduler >= 1) {\n      log('OnUpdate help: A ' + mid + ' mutation #2 to doc to force schedule rearm');\n    }\n    if (newdoc.verbose.scheduler >= 3) {\n      log('OnUpdate help: B ' + mid + ',', newdoc);\n    }\n  } catch (e) {\n    log('OnUpdate help: E ' + meta.id + ', Error exception:', e);\n  }\n}","depcfg":{"buckets":[{"alias":"cron_bkt","bucket_name":"crondata","access":"rw"}],"curl":[],"metadata_bucket":"metadata","source_bucket":"crondata"},"version":"evt-6.5.1-0000-ee","handleruuid":624792960,"id":0,"function_instance_id":"zt4zH2","appname":"cron_impl_2func_651_help","settings":{"cluster_stats":null,"dcp_stream_boundary":"everything","deadline_timeout":62,"deployment_status":false,"description":"A cron like scheduler helper part 1","execution_timeout":60,"language_compatibility":"6.5.0","log_level":"INFO","n1ql_consistency":"none","processing_status":false,"user_prefix":"eventing","using_timer":false,"worker_count":3},"using_timer":false,"src_mutation":true}]